#!/usr/bin/env ruby
require 'json'
require 'net/http'
require 'uri'

input = STDIN.read
STDIN.close_read

input = JSON.parse(input)
config = input['hook']['configuration']
policy = input['policy']['name']
username = input['node']['facts']['user']
ipaddress = input['node']['facts']['ipaddress_eno16777984']

if config['counter'].to_i.to_s != config['counter'].to_s
  puts({ 'error' => "Hook configuration `counter` must be an integer (was: #{config['counter']})" }.to_json)
  exit 1
elsif policy != config['policy']
  output = {'output' => "No match for policy '#{policy}' found in hook; skipping"}
else
  policy_counter = config['counter'].to_i
  next_policy_counter = policy_counter + 1
  # This could just as easily call an external system to retrieve the node's
  # hostname0.

  uri = URI('http://commander.bellevuelab.isus.emc.com/hubot/vm/complete')
  req = Net::HTTP::Post.new uri.path
  req.body = {:user => username, :ipaddr => ipaddress}.to_json

  res - Net::HTTP.start(uri.host, uri.port){|http|
    http.request(req)
  }

  output = {
      'hook' => {
          'configuration' => {
              'update' => {
                  'counter' => next_policy_counter
              }
          }
      }
  }
end

puts output.to_json
