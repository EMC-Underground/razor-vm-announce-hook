#!/usr/bin/env ruby
require 'json'
require 'rest_client'

input = STDIN.read
STDIN.close_read

input = JSON.parse(input)
config = input['hook']['configuration']
node = input['node']

# grab the node's type and translate it
case node['facts']['is_virtual']
when "true"
 node-type = "virtual"
when "false"
 node-type = "physical"

if config['nodes_registered'].to_i.to_s != config['nodes_registered'].to_s
  puts({ 'error' => "Hook configuration `nodes_registered` must be an integer (was: #{config['nodes_registered']})" }.to_json)
  exit 1
elsif config['node-type'] != node-type
  exit 0
else
  policy_counter = config['nodes_registered'].to_i
  next_policy_counter = policy_counter + 1
  # This could just as easily call an external system to retrieve the node's
  # hostname0.

  api_url = "http://commander.bellevuelab.isus.emc.com/hubot/node/status"
  # req = Net::HTTP::Post.new uri.path
  if config['node-type'] == "physical"
    # Set payload to physcial stats
    # user
    username = "None"
    # status
    status = "We have a new host node!"

  elsif config['node-type'] == "virtual"
    # Set payload to virtual stats
    # user
    username = input['node']['facts']['user']
    # status
    status = "We got a new vm!"
  else
    # Bad node type, send out error
    puts({ 'error' => " Hook configuration `node-type` is invalid type; must be either physical or virtual" }.to_json)
    exit 1
  end

  # nodeState - determined by event itself
  nodeState = "registered"
  # Build packet
  api_payload = {"user" => username, "status" => status, "state" => nodeState, "node-type" => config['node-type']}

  # Send packet to hubot
  req = RestClient::Request.execute( method: :post, url: api_url, verify_ssl: false, payload: api_payload, headers: { content_type: 'application/json'})

  output = {
      'hook' => {
          'configuration' => {
              'update' => {
                  'nodes_registered' => next_policy_counter
              }
          }
      }
  }
end

puts output.to_json
